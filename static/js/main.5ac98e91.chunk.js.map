{"version":3,"sources":["logo.svg","Component/time.js","Component/timer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Time","_ref","ms","react_default","a","createElement","className","Heur","Math","floor","msPerMinute","HeurReste","Minute","msPerSecond","MinuteReste","Second","String","padStart","msToTime","Timer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","timeMs","start","bind","assertThisInitialized","pause","_this2","interval","setInterval","setState","clearInterval","undefined","time","type","value","onClick","Component","App","timer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gMC8BzBC,EAfF,SAAAC,GAAY,IAATC,EAASD,EAATC,GACZ,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAhBV,SAAAJ,GACb,IAGMK,EAAOC,KAAKC,MAAMP,EADNQ,MAEZC,EAAYT,EAFAQ,KAGZE,EAASJ,KAAKC,MAAME,EAJNE,KAKdC,EAAcH,EALAE,IAMdE,EAASP,KAAKC,MAAMK,EAPN,KAQpB,OAAQE,OAAOT,GAAMU,SAAS,EAAG,KAAO,IAAMD,OAAOJ,GAAQK,SAAS,EAAG,KAAO,IAAMD,OAAOD,GAAQE,SAAS,EAAG,KAQpGC,CAAShB,IAEdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAf,cC4BDa,cAhDX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,OAAQ,GAEZR,EAAKS,MAAQT,EAAKS,MAAMC,KAAXT,OAAAU,EAAA,EAAAV,CAAAD,IACbA,EAAKY,MAAQZ,EAAKY,MAAMF,KAAXT,OAAAU,EAAA,EAAAV,CAAAD,IANEA,uEAQX,IAAAa,EAAAV,KACJ,IAAIA,KAAKI,MAAMO,SAAf,CAGA,IAAMA,EAAWC,YACb,WACIF,EAAKG,SAAS,CACVR,OAAQK,EAAKN,MAAMC,OAAS,OAGpC,KAEJL,KAAKa,SAAS,CACVF,SAAUA,qCAITX,KAAKI,MAAMO,WAGhBG,cAAcd,KAAKI,MAAMO,UACzBX,KAAKa,SAAS,CACVF,cAAUI,sCAId,OAAOpC,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAACmC,EAAD,CAAMtC,GAAIsB,KAAKI,MAAMC,SACrB1B,EAAAC,EAAAC,cAAA,SACIoC,KAAK,SACLC,MAAM,QACNC,QAASnB,KAAKM,QAClB3B,EAAAC,EAAAC,cAAA,SACIoC,KAAK,SACLC,MAAM,QACNC,QAASnB,KAAKS,gBA5CVW,aCULC,MARf,WACE,OACC1C,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAACyC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5ac98e91.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\nconst msToTime = ms =>{\r\n    const msPerSecond = 1000\r\n    const msPerMinute = msPerSecond * 60\r\n    const msPerHeur = msPerMinute*60 \r\n    const Heur = Math.floor(ms / msPerHeur)\r\n    const HeurReste = ms % msPerHeur \r\n    const Minute = Math.floor(HeurReste / msPerMinute)\r\n    const MinuteReste = HeurReste % msPerMinute\r\n    const Second = Math.floor(MinuteReste / msPerSecond)\r\n    return (String(Heur).padStart(2, '0') + \":\" + String(Minute).padStart(2, '0') + \":\" + String(Second).padStart(2, '0'))\r\n\r\n}\r\n\r\nconst Time = ({ ms }) => {\r\n    return <div className=\"time-container\">\r\n        <div className=\"time-inner-container\">\r\n            <div className=\"time-digits\">\r\n                {msToTime(ms)}\r\n            </div>\r\n            <div className=\"time-text\">\r\n                <div className=\"time-text-item\">Hour</div>\r\n                <div className=\"time-text-item\">Minute</div>\r\n                <div className=\"time-text-item\">Second</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Time","import React, { Component } from 'react'\r\nimport Time from './time'\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timeMs: 0\r\n        }\r\n        this.start = this.start.bind(this)\r\n        this.pause = this.pause.bind(this)\r\n    }\r\n    start() {\r\n        if (this.state.interval) {\r\n            return\r\n        }\r\n        const interval = setInterval(\r\n            () => {\r\n                this.setState({\r\n                    timeMs: this.state.timeMs + 1000\r\n                })\r\n            },\r\n            1000\r\n        )\r\n        this.setState({\r\n            interval: interval\r\n        })\r\n    }\r\n    pause() {\r\n        if (!this.state.interval) {\r\n            return\r\n        }\r\n        clearInterval(this.state.interval)\r\n        this.setState({\r\n            interval: undefined\r\n        })\r\n    }\r\n    render() {\r\n        return <div>\r\n            <Time ms={this.state.timeMs} />\r\n            <input\r\n                type=\"button\"\r\n                value=\"Start\"\r\n                onClick={this.start} />\r\n            <input\r\n                type=\"button\"\r\n                value=\"Pause\"\r\n                onClick={this.pause} />\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Timer","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Timer from './Component/timer'\n\nfunction App() {\n  return ( \n   <div>\n      <Timer /> \n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}